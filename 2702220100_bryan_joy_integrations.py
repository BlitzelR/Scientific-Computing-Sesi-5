# -*- coding: utf-8 -*-
"""2702220100_Bryan Joy_Integrations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1abAGt0SaOiUzkcgTd_recG3CFmkWquwX
"""

import numpy as np

a = 0
b = np.pi
n = 11
h = (b - a) / (n - 1)
x = np.linspace(a, b, n)
f = np.sin(x)

I_riemannL = h * sum(f[:n-1])
err_riemannL = 2 - I_riemannL

I_riemannR = h * sum(f[1::])
err_riemannR = 2 - I_riemannR

I_mid = h * sum(np.sin((x[:n-1] \
                        + x[1:])/2))
err_mid = 2 - I_mid

print(I_riemannL)
print(err_riemannL)

print(I_riemannR)
print(err_riemannR)

print(I_mid)
print(err_mid)

import numpy as np

a = 0
b = np.pi
n = 11
h = (b - a) / (n - 1)
x = np.linspace(a, b, n)
f = np.sin(x)

I_trap = (h/2) * (f[0] + \
                  2 * sum(f[1:n-1]) + f[n-1])
err_trap = 2 - I_trap

print(I_trap)
print(err_trap)

import numpy as np
from scipy.integrate import trapz

a = 0
b = np.pi
n = 11
h = (b - a) / (n - 1)
x = np.linspace(a, b, n)
f = np.sin(x)

I_trapz = trapz(f,x)
I_trap = (h/2) * (f[0] + 2 * sum(f[1:n-1]) + f[n-1])

print(I_trapz)
print(I_trap)

from scipy.integrate import quad

I_quad, est_err_quad = \
quad(np.sin, 0, np.pi)
print(I_quad)
err_quad = 2 - I_quad
print(est_err_quad, err_quad)

"""Quiz Integration .

"""

import numpy as np
from scipy.integrate import trapz

# Function to compute integral using composite trapezoidal rule
def composite_trapezoidal_rule(f, a, b, n):
    x = np.linspace(a, b, n + 1)  # n panels means n+1 points
    h = (b - a) / n
    y = f(x)
    I_trap = (h / 2) * (y[0] + 2 * np.sum(y[1:n]) + y[n])
    return I_trap

f = np.sin

a = 0
b = np.pi

n1 = 8
n2 = 16

I_trap_8_panels = composite_trapezoidal_rule(f, a, b, n1)
I_trap_16_panels = composite_trapezoidal_rule(f, a, b, n2)

print("Integral with 8 panels: ", I_trap_8_panels)
print("Integral with 16 panels: ", I_trap_16_panels)

x_11 = np.linspace(a, b, 11)
f_11 = np.sin(x_11)
I_trapz_11 = trapz(f_11, x_11)
print("Integral using scipy's trapz function with 11 points: ", I_trapz_11)

exact_integral = -np.cos(b) + np.cos(a)
print("Exact integral: ", exact_integral)